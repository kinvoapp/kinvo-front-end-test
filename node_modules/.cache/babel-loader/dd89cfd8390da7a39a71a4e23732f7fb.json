{"ast":null,"code":"'use strict';\n\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\nconst ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\n\nfunction unescape(c) {\n  const u = c[0] === 'u';\n  const bracket = c[1] === '{';\n\n  if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {\n    return String.fromCharCode(parseInt(c.slice(1), 16));\n  }\n\n  if (u && bracket) {\n    return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n  }\n\n  return ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n  const results = [];\n  const chunks = arguments_.trim().split(/\\s*,\\s*/g);\n  let matches;\n\n  for (const chunk of chunks) {\n    const number = Number(chunk);\n\n    if (!Number.isNaN(number)) {\n      results.push(number);\n    } else if (matches = chunk.match(STRING_REGEX)) {\n      results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n    } else {\n      throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n    }\n  }\n\n  return results;\n}\n\nfunction parseStyle(style) {\n  STYLE_REGEX.lastIndex = 0;\n  const results = [];\n  let matches;\n\n  while ((matches = STYLE_REGEX.exec(style)) !== null) {\n    const name = matches[1];\n\n    if (matches[2]) {\n      const args = parseArguments(name, matches[2]);\n      results.push([name].concat(args));\n    } else {\n      results.push([name]);\n    }\n  }\n\n  return results;\n}\n\nfunction buildStyle(chalk, styles) {\n  const enabled = {};\n\n  for (const layer of styles) {\n    for (const style of layer.styles) {\n      enabled[style[0]] = layer.inverse ? null : style.slice(1);\n    }\n  }\n\n  let current = chalk;\n\n  for (const [styleName, styles] of Object.entries(enabled)) {\n    if (!Array.isArray(styles)) {\n      continue;\n    }\n\n    if (!(styleName in current)) {\n      throw new Error(`Unknown Chalk style: ${styleName}`);\n    }\n\n    current = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n  }\n\n  return current;\n}\n\nmodule.exports = (chalk, temporary) => {\n  const styles = [];\n  const chunks = [];\n  let chunk = []; // eslint-disable-next-line max-params\n\n  temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n    if (escapeCharacter) {\n      chunk.push(unescape(escapeCharacter));\n    } else if (style) {\n      const string = chunk.join('');\n      chunk = [];\n      chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n      styles.push({\n        inverse,\n        styles: parseStyle(style)\n      });\n    } else if (close) {\n      if (styles.length === 0) {\n        throw new Error('Found extraneous } in Chalk template literal');\n      }\n\n      chunks.push(buildStyle(chalk, styles)(chunk.join('')));\n      chunk = [];\n      styles.pop();\n    } else {\n      chunk.push(character);\n    }\n  });\n  chunks.push(chunk.join(''));\n\n  if (styles.length > 0) {\n    const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n    throw new Error(errMsg);\n  }\n\n  return chunks.join('');\n};","map":{"version":3,"sources":["C:/Users/ingrisan/Documents/projeto/kinvo-front-end-test/projeto/node_modules/react-dev-utils/node_modules/chalk/source/templates.js"],"names":["TEMPLATE_REGEX","STYLE_REGEX","STRING_REGEX","ESCAPE_REGEX","ESCAPES","Map","unescape","c","u","bracket","length","String","fromCharCode","parseInt","slice","fromCodePoint","get","parseArguments","name","arguments_","results","chunks","trim","split","matches","chunk","number","Number","isNaN","push","match","replace","m","escape","character","Error","parseStyle","style","lastIndex","exec","args","concat","buildStyle","chalk","styles","enabled","layer","inverse","current","styleName","Object","entries","Array","isArray","module","exports","temporary","escapeCharacter","close","string","join","pop","errMsg"],"mappings":"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","sourcesContent":["'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tconst u = c[0] === 'u';\n\tconst bracket = c[1] === '{';\n\n\tif ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\tif (u && bracket) {\n\t\treturn String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n\tconst results = [];\n\tconst chunks = arguments_.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tconst number = Number(chunk);\n\t\tif (!Number.isNaN(number)) {\n\t\t\tresults.push(number);\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const [styleName, styles] of Object.entries(enabled)) {\n\t\tif (!Array.isArray(styles)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(styleName in current)) {\n\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t}\n\n\t\tcurrent = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, temporary) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttemporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n\t\tif (escapeCharacter) {\n\t\t\tchunk.push(unescape(escapeCharacter));\n\t\t} else if (style) {\n\t\t\tconst string = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(character);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n"]},"metadata":{},"sourceType":"script"}